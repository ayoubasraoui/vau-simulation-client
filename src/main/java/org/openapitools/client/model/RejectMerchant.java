/*
 * Visa Account Updater
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * [RejectMerchant]
 */
@JsonPropertyOrder({
  RejectMerchant.JSON_PROPERTY_REJECT_CODE,
  RejectMerchant.JSON_PROPERTY_REJECT_MESSAGE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-29T11:09:21.433785600+01:00[Africa/Casablanca]", comments = "Generator version: 7.12.0")
public class RejectMerchant {
  public static final String JSON_PROPERTY_REJECT_CODE = "rejectCode";
  @jakarta.annotation.Nonnull
  private String rejectCode;

  public static final String JSON_PROPERTY_REJECT_MESSAGE = "rejectMessage";
  @jakarta.annotation.Nonnull
  private String rejectMessage;

  public RejectMerchant() {
  }

  public RejectMerchant rejectCode(@jakarta.annotation.Nonnull String rejectCode) {
    
    this.rejectCode = rejectCode;
    return this;
  }

  /**
   * [This field contains one of the following reject codes: * C-Mandatory field Card Acceptor Id missing or invalid or having value zero * D-Duplicate Merchant ID in Request * F-Merchant name exceeds the maximum length of 75 characters * G-Mandatory Field Merchant Country Code missing or must be 3 digit ISO code(including leading zeros) * H-Merchant Acquiring Identifier must be numeric of length 6 or 8 * I-Merchant ID must be 12 characters * J-Merchant name having non english characters or &#39;|&#39; unsupported character * K-Max number of Merchant Acquiring Identifiers supported is 18 * L-Internet Address exceeds the maximum length of 100 characters * M-Merchant Id already exists for this Acquirer Segment * N-Mandatory Field Merchant Name missing * O-Parent Company name having non english characters or &#39;|&#39; unsupported character * P-Mandatory Field Merchant Category Code missing or must be numeric * Q-Mandatory Field Merchant Acquiring Identifier(s) missing or invalid * R-Mandatory Field Merchant ID missing * S-Merchant Country  should be in same region as acquirer * U-Card Acceptor Id exceeds the maximum length of 15 characters * W-Merchant Category Code exceeds the maximum length of 4 digits * Y-Merchant did not qualify for compliance check * Z-Merchant Category Code is Ineligible for Merchant enrollment] 
   * @return rejectCode
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REJECT_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRejectCode() {
    return rejectCode;
  }


  @JsonProperty(JSON_PROPERTY_REJECT_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRejectCode(@jakarta.annotation.Nonnull String rejectCode) {
    this.rejectCode = rejectCode;
  }

  public RejectMerchant rejectMessage(@jakarta.annotation.Nonnull String rejectMessage) {
    
    this.rejectMessage = rejectMessage;
    return this;
  }

  /**
   * [This field contains the description of reject message: * C-Mandatory field Card Acceptor Id missing or invalid or having value zero * D-Duplicate Merchant ID in Request * F-Merchant name exceeds the maximum length of 75 characters * G-Mandatory Field Merchant Country Code missing or must be 3 digit ISO code(including leading zeros) * H-Merchant Acquiring Identifier must be numeric of length 6 or 8 * I-Merchant ID must be 12 characters * J-Merchant name having non english characters or &#39;|&#39; unsupported character * K-Max number of Merchant Acquiring Identifiers supported is 18 * L-Internet Address exceeds the maximum length of 100 characters * M-Merchant Id already exists for this Acquirer Segment * N-Mandatory Field Merchant Name missing * O-Parent Company name having non english characters or &#39;|&#39; unsupported character * P-Mandatory Field Merchant Category Code missing or must be numeric * Q-Mandatory Field Merchant Acquiring Identifier(s) missing or invalid * R-Mandatory Field Merchant ID missing * S-Merchant Country  should be in same region as acquirer * U-Card Acceptor Id exceeds the maximum length of 15 characters * W-Merchant Category Code exceeds the maximum length of 4 digits * Y-Merchant did not qualify for compliance check * Z-Merchant Category Code is Ineligible for Merchant enrollment] 
   * @return rejectMessage
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REJECT_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRejectMessage() {
    return rejectMessage;
  }


  @JsonProperty(JSON_PROPERTY_REJECT_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRejectMessage(@jakarta.annotation.Nonnull String rejectMessage) {
    this.rejectMessage = rejectMessage;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RejectMerchant rejectMerchant = (RejectMerchant) o;
    return Objects.equals(this.rejectCode, rejectMerchant.rejectCode) &&
        Objects.equals(this.rejectMessage, rejectMerchant.rejectMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rejectCode, rejectMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RejectMerchant {\n");
    sb.append("    rejectCode: ").append(toIndentedString(rejectCode)).append("\n");
    sb.append("    rejectMessage: ").append(toIndentedString(rejectMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

