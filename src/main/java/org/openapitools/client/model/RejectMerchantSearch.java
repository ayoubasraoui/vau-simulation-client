/*
 * Visa Account Updater
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * [RejectMerchantSearch contains the reject details if the merchant search is rejected]
 */
@JsonPropertyOrder({
  RejectMerchantSearch.JSON_PROPERTY_REJECT_CODE,
  RejectMerchantSearch.JSON_PROPERTY_REJECT_MESSAGE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-29T11:09:21.433785600+01:00[Africa/Casablanca]", comments = "Generator version: 7.12.0")
public class RejectMerchantSearch {
  public static final String JSON_PROPERTY_REJECT_CODE = "rejectCode";
  @jakarta.annotation.Nonnull
  private String rejectCode;

  public static final String JSON_PROPERTY_REJECT_MESSAGE = "rejectMessage";
  @jakarta.annotation.Nonnull
  private String rejectMessage;

  public RejectMerchantSearch() {
  }

  public RejectMerchantSearch rejectCode(@jakarta.annotation.Nonnull String rejectCode) {
    
    this.rejectCode = rejectCode;
    return this;
  }

  /**
   * [This field contains the following reject codes: * I-Merchant ID must be 12 characters] 
   * @return rejectCode
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REJECT_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRejectCode() {
    return rejectCode;
  }


  @JsonProperty(JSON_PROPERTY_REJECT_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRejectCode(@jakarta.annotation.Nonnull String rejectCode) {
    this.rejectCode = rejectCode;
  }

  public RejectMerchantSearch rejectMessage(@jakarta.annotation.Nonnull String rejectMessage) {
    
    this.rejectMessage = rejectMessage;
    return this;
  }

  /**
   * [This field contains the description of reject message: * I-Merchant ID must be 12 characters] 
   * @return rejectMessage
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REJECT_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRejectMessage() {
    return rejectMessage;
  }


  @JsonProperty(JSON_PROPERTY_REJECT_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRejectMessage(@jakarta.annotation.Nonnull String rejectMessage) {
    this.rejectMessage = rejectMessage;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RejectMerchantSearch rejectMerchantSearch = (RejectMerchantSearch) o;
    return Objects.equals(this.rejectCode, rejectMerchantSearch.rejectCode) &&
        Objects.equals(this.rejectMessage, rejectMerchantSearch.rejectMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rejectCode, rejectMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RejectMerchantSearch {\n");
    sb.append("    rejectCode: ").append(toIndentedString(rejectCode)).append("\n");
    sb.append("    rejectMessage: ").append(toIndentedString(rejectMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

