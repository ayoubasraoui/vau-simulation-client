/*
 * Visa Account Updater
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * [Successful Inquiry Response body]
 */
@JsonPropertyOrder({
  SuccessfulInquiryResponse.JSON_PROPERTY_NEW_EXPIRATION_DATE,
  SuccessfulInquiryResponse.JSON_PROPERTY_OLD_EXPIRATION_DATE,
  SuccessfulInquiryResponse.JSON_PROPERTY_SERVICE_IDENTIFIER,
  SuccessfulInquiryResponse.JSON_PROPERTY_PREVIOUSLY_SENT_FLAG,
  SuccessfulInquiryResponse.JSON_PROPERTY_NEW_CARDHOLDER_ACCOUNT_NUMBER,
  SuccessfulInquiryResponse.JSON_PROPERTY_OLD_CARDHOLDER_ACCOUNT_NUMBER
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-29T11:09:21.433785600+01:00[Africa/Casablanca]", comments = "Generator version: 7.12.0")
public class SuccessfulInquiryResponse {
  public static final String JSON_PROPERTY_NEW_EXPIRATION_DATE = "newExpirationDate";
  @jakarta.annotation.Nullable
  private String newExpirationDate;

  public static final String JSON_PROPERTY_OLD_EXPIRATION_DATE = "oldExpirationDate";
  @jakarta.annotation.Nullable
  private String oldExpirationDate;

  public static final String JSON_PROPERTY_SERVICE_IDENTIFIER = "serviceIdentifier";
  @jakarta.annotation.Nullable
  private String serviceIdentifier;

  public static final String JSON_PROPERTY_PREVIOUSLY_SENT_FLAG = "previouslySentFlag";
  @jakarta.annotation.Nullable
  private String previouslySentFlag;

  public static final String JSON_PROPERTY_NEW_CARDHOLDER_ACCOUNT_NUMBER = "newCardholderAccountNumber";
  @jakarta.annotation.Nonnull
  private String newCardholderAccountNumber;

  public static final String JSON_PROPERTY_OLD_CARDHOLDER_ACCOUNT_NUMBER = "oldCardholderAccountNumber";
  @jakarta.annotation.Nonnull
  private String oldCardholderAccountNumber;

  public SuccessfulInquiryResponse() {
  }

  public SuccessfulInquiryResponse newExpirationDate(@jakarta.annotation.Nullable String newExpirationDate) {
    
    this.newExpirationDate = newExpirationDate;
    return this;
  }

  /**
   * [This field contains one of the following: * The expiration date when new information is available, in YYMM format, where: YY &#x3D; 00–99 MM &#x3D; 01–12 Spaces for messages that indicate one of the following conditions:     * Closed Account {C}      * Contact Cardholder {Q}      * Participating BIN, No Match {P}      * Non-participating BIN, No Match {N} ]
   * @return newExpirationDate
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NEW_EXPIRATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNewExpirationDate() {
    return newExpirationDate;
  }


  @JsonProperty(JSON_PROPERTY_NEW_EXPIRATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNewExpirationDate(@jakarta.annotation.Nullable String newExpirationDate) {
    this.newExpirationDate = newExpirationDate;
  }

  public SuccessfulInquiryResponse oldExpirationDate(@jakarta.annotation.Nullable String oldExpirationDate) {
    
    this.oldExpirationDate = oldExpirationDate;
    return this;
  }

  /**
   * [This field contains the old expiration date in YYMM format, where YY &#x3D; 00-99 and MM &#x3D; 01–12]
   * @return oldExpirationDate
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OLD_EXPIRATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOldExpirationDate() {
    return oldExpirationDate;
  }


  @JsonProperty(JSON_PROPERTY_OLD_EXPIRATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOldExpirationDate(@jakarta.annotation.Nullable String oldExpirationDate) {
    this.oldExpirationDate = oldExpirationDate;
  }

  public SuccessfulInquiryResponse serviceIdentifier(@jakarta.annotation.Nullable String serviceIdentifier) {
    
    this.serviceIdentifier = serviceIdentifier;
    return this;
  }

  /**
   * [This field contains one of the following: * A—Account number change message * C—Closed account advice * E—Expiration date change * N—Non-participating BIN * Q—Contact cardholder advice * O—Cardholder Opt-Out     Note:        – When a &#39;Stop Advice&#39; is placed on a card and the acquirer/merchant is ready to accept          the code, they would receive the &#39;O&#39;.        – If the acquirer is not ready to accept &#39;O&#39;, then, VAU responds with &#39;P&#39;.        – To confirm the ability to receive &#39;O&#39;, please send email to VAU Client Support Team at          updater@visa.com (for North America customers), or customersupport@visa.com (for          Europe customers). * P—Participating BIN, no match         Note: UK only—This might also mean that the account is currently being switched from one bank to a different bank as part of the UKCASS. * V—Match made, account number and expiration date unchanged.]
   * @return serviceIdentifier
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVICE_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getServiceIdentifier() {
    return serviceIdentifier;
  }


  @JsonProperty(JSON_PROPERTY_SERVICE_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServiceIdentifier(@jakarta.annotation.Nullable String serviceIdentifier) {
    this.serviceIdentifier = serviceIdentifier;
  }

  public SuccessfulInquiryResponse previouslySentFlag(@jakarta.annotation.Nullable String previouslySentFlag) {
    
    this.previouslySentFlag = previouslySentFlag;
    return this;
  }

  /**
   * [This field contains one of the following:  Y—Yes or N—No Note: A Y value indicates that exactly the same account information was requested by the acquirer and sent by VAU during the previous 40 days (the retention period), excluding the current day.]
   * @return previouslySentFlag
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREVIOUSLY_SENT_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPreviouslySentFlag() {
    return previouslySentFlag;
  }


  @JsonProperty(JSON_PROPERTY_PREVIOUSLY_SENT_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreviouslySentFlag(@jakarta.annotation.Nullable String previouslySentFlag) {
    this.previouslySentFlag = previouslySentFlag;
  }

  public SuccessfulInquiryResponse newCardholderAccountNumber(@jakarta.annotation.Nonnull String newCardholderAccountNumber) {
    
    this.newCardholderAccountNumber = newCardholderAccountNumber;
    return this;
  }

  /**
   * [This field contains one of the following: * The account number when new information is available. * The account number if a validation response is provided. Spaces for records with the following service identifiers:     * Closed Account {C}     * Contact Cardholder {Q}     * Participating BIN, No Match {P}               Note: UK only—This might also mean that the account is currently being switched from one bank to a different bank as part of the UKCASS.     * Non-participating BIN, No Match {N} ]
   * @return newCardholderAccountNumber
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NEW_CARDHOLDER_ACCOUNT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNewCardholderAccountNumber() {
    return newCardholderAccountNumber;
  }


  @JsonProperty(JSON_PROPERTY_NEW_CARDHOLDER_ACCOUNT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNewCardholderAccountNumber(@jakarta.annotation.Nonnull String newCardholderAccountNumber) {
    this.newCardholderAccountNumber = newCardholderAccountNumber;
  }

  public SuccessfulInquiryResponse oldCardholderAccountNumber(@jakarta.annotation.Nonnull String oldCardholderAccountNumber) {
    
    this.oldCardholderAccountNumber = oldCardholderAccountNumber;
    return this;
  }

  /**
   * [This field contains the account number that was submitted in the associated Acquirer Inquiry Request.]
   * @return oldCardholderAccountNumber
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OLD_CARDHOLDER_ACCOUNT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOldCardholderAccountNumber() {
    return oldCardholderAccountNumber;
  }


  @JsonProperty(JSON_PROPERTY_OLD_CARDHOLDER_ACCOUNT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOldCardholderAccountNumber(@jakarta.annotation.Nonnull String oldCardholderAccountNumber) {
    this.oldCardholderAccountNumber = oldCardholderAccountNumber;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuccessfulInquiryResponse successfulInquiryResponse = (SuccessfulInquiryResponse) o;
    return Objects.equals(this.newExpirationDate, successfulInquiryResponse.newExpirationDate) &&
        Objects.equals(this.oldExpirationDate, successfulInquiryResponse.oldExpirationDate) &&
        Objects.equals(this.serviceIdentifier, successfulInquiryResponse.serviceIdentifier) &&
        Objects.equals(this.previouslySentFlag, successfulInquiryResponse.previouslySentFlag) &&
        Objects.equals(this.newCardholderAccountNumber, successfulInquiryResponse.newCardholderAccountNumber) &&
        Objects.equals(this.oldCardholderAccountNumber, successfulInquiryResponse.oldCardholderAccountNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(newExpirationDate, oldExpirationDate, serviceIdentifier, previouslySentFlag, newCardholderAccountNumber, oldCardholderAccountNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuccessfulInquiryResponse {\n");
    sb.append("    newExpirationDate: ").append(toIndentedString(newExpirationDate)).append("\n");
    sb.append("    oldExpirationDate: ").append(toIndentedString(oldExpirationDate)).append("\n");
    sb.append("    serviceIdentifier: ").append(toIndentedString(serviceIdentifier)).append("\n");
    sb.append("    previouslySentFlag: ").append(toIndentedString(previouslySentFlag)).append("\n");
    sb.append("    newCardholderAccountNumber: ").append(toIndentedString(newCardholderAccountNumber)).append("\n");
    sb.append("    oldCardholderAccountNumber: ").append(toIndentedString(oldCardholderAccountNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

