/*
 * Visa Account Updater
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.LocalDate;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * [Stop advice fields]
 */
@JsonPropertyOrder({
  StopAdvice.JSON_PROPERTY_START_DATE,
  StopAdvice.JSON_PROPERTY_MERCHANT_NAME,
  StopAdvice.JSON_PROPERTY_CARD_ACCEPTOR_ID,
  StopAdvice.JSON_PROPERTY_CARDHOLDER_ACCOUNT_NUMBER
})
@JsonTypeName("stopAdvice")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-29T11:09:21.433785600+01:00[Africa/Casablanca]", comments = "Generator version: 7.12.0")
public class StopAdvice {
  public static final String JSON_PROPERTY_START_DATE = "startDate";
  @jakarta.annotation.Nullable
  private LocalDate startDate;

  public static final String JSON_PROPERTY_MERCHANT_NAME = "merchantName";
  @jakarta.annotation.Nonnull
  private String merchantName;

  public static final String JSON_PROPERTY_CARD_ACCEPTOR_ID = "cardAcceptorId";
  @jakarta.annotation.Nonnull
  private String cardAcceptorId;

  public static final String JSON_PROPERTY_CARDHOLDER_ACCOUNT_NUMBER = "cardholderAccountNumber";
  @jakarta.annotation.Nonnull
  private String cardholderAccountNumber;

  public StopAdvice() {
  }

  public StopAdvice startDate(@jakarta.annotation.Nullable LocalDate startDate) {
    
    this.startDate = startDate;
    return this;
  }

  /**
   * [This field contains the start date, which shouldn&#39;t be less than the current date, and its format is yyyy-mm-dd, the default value is the current date.]
   * @return startDate
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getStartDate() {
    return startDate;
  }


  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartDate(@jakarta.annotation.Nullable LocalDate startDate) {
    this.startDate = startDate;
  }

  public StopAdvice merchantName(@jakarta.annotation.Nonnull String merchantName) {
    
    this.merchantName = merchantName;
    return this;
  }

  /**
   * [This field must contain merchant name.]
   * @return merchantName
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MERCHANT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMerchantName() {
    return merchantName;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMerchantName(@jakarta.annotation.Nonnull String merchantName) {
    this.merchantName = merchantName;
  }

  public StopAdvice cardAcceptorId(@jakarta.annotation.Nonnull String cardAcceptorId) {
    
    this.cardAcceptorId = cardAcceptorId;
    return this;
  }

  /**
   * [This field must contain card acceptor id.]
   * @return cardAcceptorId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CARD_ACCEPTOR_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCardAcceptorId() {
    return cardAcceptorId;
  }


  @JsonProperty(JSON_PROPERTY_CARD_ACCEPTOR_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCardAcceptorId(@jakarta.annotation.Nonnull String cardAcceptorId) {
    this.cardAcceptorId = cardAcceptorId;
  }

  public StopAdvice cardholderAccountNumber(@jakarta.annotation.Nonnull String cardholderAccountNumber) {
    
    this.cardholderAccountNumber = cardholderAccountNumber;
    return this;
  }

  /**
   * [This field must contain the account number (Visa, Mastercard, American Express, or Discover).]
   * @return cardholderAccountNumber
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CARDHOLDER_ACCOUNT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCardholderAccountNumber() {
    return cardholderAccountNumber;
  }


  @JsonProperty(JSON_PROPERTY_CARDHOLDER_ACCOUNT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCardholderAccountNumber(@jakarta.annotation.Nonnull String cardholderAccountNumber) {
    this.cardholderAccountNumber = cardholderAccountNumber;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StopAdvice stopAdvice = (StopAdvice) o;
    return Objects.equals(this.startDate, stopAdvice.startDate) &&
        Objects.equals(this.merchantName, stopAdvice.merchantName) &&
        Objects.equals(this.cardAcceptorId, stopAdvice.cardAcceptorId) &&
        Objects.equals(this.cardholderAccountNumber, stopAdvice.cardholderAccountNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startDate, merchantName, cardAcceptorId, cardholderAccountNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StopAdvice {\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    cardAcceptorId: ").append(toIndentedString(cardAcceptorId)).append("\n");
    sb.append("    cardholderAccountNumber: ").append(toIndentedString(cardholderAccountNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

